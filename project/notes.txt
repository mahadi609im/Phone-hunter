{
   step1 : loadPhones...

   const loadPhones = async () => {
      let response = await fetch(
         `https://openapi.programming-hero.com/api/phones?search=iphone`
      );
      let data = await response.json()
      let phones = data.data
      console.log(phones);
   }

   loadPhones()
}


{
   step2 : displayData...

   const loadPhones = async () => {
      let response = await fetch(
         `https://openapi.programming-hero.com/api/phones?search=iphone`
      );
      let data = await response.json();
      let phones = data.data;
      displayData(phones);
   };

   const displayData = (dataArg) => {
      dataArg.forEach(i => {
         console.log(i)
      });
   };

}


{
   step3 : daisyui theke card nie asha...

   <section>
      <div id="card_container" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3 pt-5 pb-20">
         <div class="card bg-base-100 w-96 shadow-xl">
            <figure>
               <img src="https://img.daisyui.com/images/stock/photo-1606107557195-0e29a4b5b4aa.webp" alt="Shoes" />
            </figure>
            <div class="card-body">
               <h2 class="card-title">Shoes!</h2>
               <p>If a dog chews shoes whose shoes does he choose?</p>
               <div class="card-actions justify-end">
                  <button class="btn btn-primary">Buy Now</button>
               </div>
            </div>
         </div>
      </div>
   </section>
}


{
   step4 : js die card create and dynamic value use...

   const displayData = (dataArg) => {

      let cardContainer = document.getElementById('card_container')
      cardContainer.textContent = ''
      
      dataArg.forEach(i => {
         let card = document.createElement('div')
         card.classList = 'card bg-white text-black shadow-xl pt-5';

         card.innerHTML = `
            <figure>
               <img src="${i.image}" alt="Shoes" />
            </figure>
            <div class="card-body">
               <h2 class="card-title">${i.phone_name}</h2>
               <p>${i.slug}</p>
               <div class="card-actions justify-end">
                  <button class="btn btn-success text-white">Buy Now</button>
               </div>
            </div>
         `;

         cardContainer.appendChild(card)
      });
   }
}


{
   step5 : searching er jonno input field & button nea...

   <section id="search_box" class="py-3 bg-green-200 flex justify-center gap-3">
      <input type="text" id="search_input" placeholder="Search here" class="input input-bordered input-success w-full max-w-xs" />
      <button class="btn btn-success text-white">search</button>
   </section>
}


{
   step6 : searchFunc create & inputValue nea and searchFunc k html a call...

   const searchFunc = () => {
      let searchInput = document.getElementById('search_input');
      let searchValue = searchInput.value
      console.log(searchValue)
      searchInput.value = ''
   }


   <button onclick="searchFunc()" class="btn btn-success text-white">search</button>
}


{
   step7 : searchArg pas & searchFunc a loadPhones k call...

   const loadPhones = async (searchArg) => {
      let response = await fetch(
      `https://openapi.programming-hero.com/api/phones?search=${searchArg}`
      );
      let data = await response.json()
      let phones = data.data
      displayData(phones);
   }


   
   const searchFunc = () => {
      let searchInput = document.getElementById('search_input');
      let searchValue = searchInput.value
      searchInput.value = ''
      loadPhones(searchValue);
   }

   const displayData = (dataArg) => {
      let cardContainer = document.getElementById('card_container')
      cardContainer.textContent = ''
   }

}


{
   step8 : first 6 item slicing...

   const displayPhones = (phonesArg) => {
      displayData(phonesArg);
   };


   const loadPhones = async (searchArg) => {
      let data = await response.json()
      let phones = data.data
      displayPhones(phones);
   }

   const displayPhones = (phoneArg) => {
      displayData(phoneArg.slice(0, 6))
   }
}


{
   step9 : showAll button show and hide ...

   <section>
      <div id="card_container" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3 pt-5 pb-20">
         
      </div>

      <div id="showBtn_container" class="hidden text-center -mt-14 mb-14 relative">
         <button id="show_btn" class="btn btn-success text-white">Show All</button>
      </div>
   </section>


   const displayPhones = (phonesArg) => {
      let showBtnContainer = document.getElementById('showBtn_container');

      if (phonesArg.length > 6) {
         showBtnContainer.classList.remove('hidden');
      } else {
         showBtnContainer.classList.add('hidden');
      }

      displayData(phonesArg.slice(0, 6))
   }
}


{
   step10 : showAll button clicked and check then showAll content ...

   const displayPhones = (phonesArg) => {
      
      displayData(phonesArg.slice(0, 6))

      document.getElementById('show_btn').addEventListener('click', () => {
         console.log('i am clicked')
      });

   }


   document.getElementById('show_btn').addEventListener('click', () => {
      displayData(phonesArg)
      
      showAllBtn.classList.add('hidden')
      
   });
}


{
   step11 : Alert message ...

   <section>
      <div id="alert_msg" class="my-5">
         <div role="alert" class="alert alert-error">
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" class="h-6 w-6 shrink-0 stroke-current">
               <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                  d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
            <span>No result found.</span>
         </div>
      </div>

      <div id="card_container" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3 pt-5 pb-20">
         
      </div>

      <div id="showAll_btn" class="hidden text-center -mt-14 mb-20 relative">
         <button class="btn btn-success text-white" id="show_btn">showAll</button>
      </div>
   </section>
}


{
   step12 : js die alert message...


   <div id="alert_msg" class="hidden my-5"></div>

   const displayData = (dataArg) => {
      let cardContainer = document.getElementById('card_container')
      cardContainer.textContent = ''

      let alertMsg = document.getElementById('alert_msg')
      alertMsg.classList.remove('hidden')

      alertMsg.innerHTML = `
         <div role="alert" class="alert alert-error">
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" class="h-6 w-6 shrink-0 stroke-current">
               <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
            <span>No result found.</span>
         </div>
      `;
   }
}


{
   step13 : alert message show and hide...

   let alertMsg = document.getElementById('alert_msg');

   if (dataArg.length === 0) {
      alertMsg.classList.remove('hidden')
      
      alertMsg.innerHTML = `
         <div role="alert" class="alert alert-error">
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" class="h-6 w-6 shrink-0 stroke-current">
               <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
            <span>No result found.</span>
         </div>
      `;
   } else {
      alertMsg.classList.add('hidden')
   }
}


{
   step14 : daisyui use to laoding icon ...

   <div id="loading_id" class="text-center my-5">
      <span class="loading bg-green-500 loading-spinner loading-lg"></span>
      <h3>Please check your internet connection</h3>
   </div>
}


{
   step15 : js die content create and show hide...

   <div id="loading_id" class="text-center my-5 hidden">
      
   </div>


   const loadingFunc = (isLoading) => {
      let loadingId = document.getElementById('loading_id');

      if (isLoading) {
         loadingId.innerHTML = `
            <span class="loading bg-green-500 loading-spinner loading-lg"></span>
            <h3>Please check your internet connection</h3>
         `;
         loadingId.classList.remove('hidden')
      }
      else {
         loadingId.classList.add('hidden')
      }
      
   }
}


{
   step16 : function call and loading true and false kora...

   const searchFunc = () => { 
      loadingFunc(true);
      let searchInput = document.getElementById('search_input');
      let searchValue = searchInput.value
   }



   const displayData = (dataArg) => {
   
      dataArg.forEach(i => {
         
      });

      loadingFunc(false);
   }
}